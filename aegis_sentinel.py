#!/usr/bin/env python3
"""
Advanced Network Security Monitor - Production Ready
‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
"""

import os
import re
import time
import json
import socket
import threading
import requests
import ipaddress
import subprocess
import signal
import sys
from datetime import datetime, timedelta
from collections import defaultdict, deque
from pathlib import Path

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
try:
    from scapy.all import sniff, IP, TCP, UDP, ICMP, Raw, get_if_list
    print("[‚úì] Scapy ready")
except ImportError:
    print("[!] Please install: pip install scapy")
    sys.exit(1)

# === ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ===
class Config:
    # Discord webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    DISCORD_WEBHOOK = ""  # ‡πÉ‡∏™‡πà webhook URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    
    # ‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    CONFIG_FILE = "security_config.json"
    BLOCKED_IPS_FILE = "blocked_ips.json"
    LOGS_DIR = Path("security_logs")
    
    # ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å)
    TRUSTED_NETWORKS = [
        "127.0.0.0/8",      # localhost
        "192.168.0.0/16",   # ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô
        "10.0.0.0/8",       # private network
        "172.16.0.0/12"     # private network
    ]
    
    # Whitelist - IP/Network ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å
    WHITELIST = [
        # Cloudflare
        "103.21.244.0/22", "103.22.200.0/22", "104.16.0.0/13",
        "108.162.192.0/18", "141.101.64.0/18", "162.158.0.0/15",
        "172.64.0.0/13", "173.245.48.0/20", "188.114.96.0/20",
        
        # Google
        "8.8.8.8/32", "8.8.4.4/32", "172.217.0.0/16",
        "74.125.0.0/16", "142.250.0.0/15",
        
        # GitHub
        "140.82.112.0/20", "192.30.252.0/22", "185.199.108.0/22",
        
        # Discord
        "162.159.128.0/17", "104.16.0.0/12"
    ]
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    PORT_SCAN_THRESHOLD = 10      # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô port ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô port scan
    CONNECTION_RATE_LIMIT = 50    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô connection ‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    AUTO_UNBLOCK_HOURS = 24       # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å x ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    
    # ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    BLOCK_MODE = True            # ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å IP
    MONITOR_MODE = True          # ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    ALERT_MODE = True           # ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# === ‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å ===
class BlockedIPManager:
    def __init__(self):
        self.blocked_ips = {}
        self.load_blocked_ips()
        
    def load_blocked_ips(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if Path(Config.BLOCKED_IPS_FILE).exists():
                with open(Config.BLOCKED_IPS_FILE, 'r') as f:
                    data = json.load(f)
                    # ‡πÅ‡∏õ‡∏•‡∏á string datetime ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô datetime object
                    for ip, info in data.items():
                        info['blocked_at'] = datetime.fromisoformat(info['blocked_at'])
                    self.blocked_ips = data
                print(f"[‚úì] ‡πÇ‡∏´‡∏•‡∏î {len(self.blocked_ips)} IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å")
        except Exception as e:
            print(f"[!] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå blocked IPs: {e}")
            self.blocked_ips = {}
    
    def save_blocked_ips(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á datetime ‡πÄ‡∏õ‡πá‡∏ô string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON
            data = {}
            for ip, info in self.blocked_ips.items():
                data[ip] = {
                    'reason': info['reason'],
                    'blocked_at': info['blocked_at'].isoformat(),
                    'auto_unblock': info.get('auto_unblock', True)
                }
            
            with open(Config.BLOCKED_IPS_FILE, 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            print(f"[!] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå blocked IPs: {e}")
    
    def is_blocked(self, ip):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IP ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return ip in self.blocked_ips
    
    def block_ip(self, ip, reason="Suspicious Activity"):
        """‡∏ö‡∏•‡πá‡∏≠‡∏Å IP"""
        if self.is_blocked(ip):
            return False
            
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô iptables
        cmd = f"iptables -C INPUT -s {ip} -j DROP 2>/dev/null || iptables -I INPUT -s {ip} -j DROP"
        result = subprocess.run(cmd, shell=True, capture_output=True)
        
        if result.returncode == 0:
            self.blocked_ips[ip] = {
                'reason': reason,
                'blocked_at': datetime.now(),
                'auto_unblock': True
            }
            self.save_blocked_ips()
            print(f"[üî¥] ‡∏ö‡∏•‡πá‡∏≠‡∏Å IP: {ip} - {reason}")
            return True
        else:
            print(f"[!] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏•‡πá‡∏≠‡∏Å IP: {ip}")
            return False
    
    def unblock_ip(self, ip):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å IP"""
        if not self.is_blocked(ip):
            return False
            
        # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å iptables
        cmd = f"iptables -D INPUT -s {ip} -j DROP 2>/dev/null"
        result = subprocess.run(cmd, shell=True, capture_output=True)
        
        if ip in self.blocked_ips:
            del self.blocked_ips[ip]
            self.save_blocked_ips()
        
        print(f"[üü¢] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å IP: {ip}")
        return True
    
    def auto_unblock_expired(self):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å IP ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß"""
        expired_ips = []
        now = datetime.now()
        
        for ip, info in self.blocked_ips.items():
            if info.get('auto_unblock', True):
                blocked_time = info['blocked_at']
                if now - blocked_time > timedelta(hours=Config.AUTO_UNBLOCK_HOURS):
                    expired_ips.append(ip)
        
        for ip in expired_ips:
            self.unblock_ip(ip)
            print(f"[‚è∞] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å IP ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤: {ip}")
        
        return len(expired_ips)
    
    def list_blocked_ips(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å"""
        if not self.blocked_ips:
            print("[‚ÑπÔ∏è] ‡πÑ‡∏°‡πà‡∏°‡∏µ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å")
            return
            
        print(f"\n--- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å ({len(self.blocked_ips)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£) ---")
        for ip, info in self.blocked_ips.items():
            blocked_time = info['blocked_at'].strftime("%Y-%m-%d %H:%M:%S")
            auto_unblock = "‚úì" if info.get('auto_unblock', True) else "‚úó"
            print(f"üìç {ip:15} | {info['reason']:30} | {blocked_time} | Auto: {auto_unblock}")
        print("--- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ---\n")

# === ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏° ===
class ThreatDetector:
    def __init__(self, blocked_ip_manager):
        self.blocked_ips = blocked_ip_manager
        self.connection_tracker = defaultdict(lambda: deque(maxlen=100))
        self.port_scan_tracker = defaultdict(set)
        self.stats = {
            'packets_analyzed': 0,
            'threats_detected': 0,
            'ips_blocked': 0,
            'start_time': datetime.now()
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs
        Config.LOGS_DIR.mkdir(exist_ok=True)
    
    def is_trusted_ip(self, ip):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IP ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            ip_obj = ipaddress.IPv4Address(ip)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö trusted networks
            for network in Config.TRUSTED_NETWORKS:
                if ip_obj in ipaddress.IPv4Network(network):
                    return True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö whitelist
            for network in Config.WHITELIST:
                if ip_obj in ipaddress.IPv4Network(network):
                    return True
                    
            return False
        except:
            return True  # ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
    
    def log_threat(self, ip, threat_type, details=""):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°"""
        timestamp = datetime.now().isoformat()
        log_entry = {
            'timestamp': timestamp,
            'ip': ip,
            'threat_type': threat_type,
            'details': details,
            'action': 'blocked' if Config.BLOCK_MODE else 'detected'
        }
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå log ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        date_str = datetime.now().strftime("%Y-%m-%d")
        log_file = Config.LOGS_DIR / f"threats_{date_str}.json"
        
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if log_file.exists():
                with open(log_file, 'r') as f:
                    logs = json.load(f)
            else:
                logs = []
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡πÉ‡∏´‡∏°‡πà
            logs.append(log_entry)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö
            with open(log_file, 'w') as f:
                json.dump(logs, f, indent=2)
                
        except Exception as e:
            print(f"[!] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log: {e}")
    
    def send_alert(self, ip, threat_type, details=""):
        """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        if not Config.ALERT_MODE or not Config.DISCORD_WEBHOOK:
            return
            
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        hostname = self.get_hostname(ip)
        
        message = f"""üö® **SECURITY ALERT** üö®
‚è∞ **Time:** `{timestamp}`
üåê **IP:** `{ip}`
üè† **Host:** `{hostname}`
‚ö†Ô∏è **Threat:** **{threat_type}**
üìù **Details:** {details}
üõ°Ô∏è **Action:** {'Blocked' if Config.BLOCK_MODE else 'Detected'}"""
        
        def send():
            try:
                response = requests.post(
                    Config.DISCORD_WEBHOOK,
                    json={"content": message},
                    timeout=5
                )
                if response.status_code == 200:
                    print(f"[‚úì] Alert sent to Discord")
                elif response.status_code == 429:
                    retry_after = response.json().get("retry_after", 1)
                    time.sleep(retry_after)
                    requests.post(Config.DISCORD_WEBHOOK, json={"content": message}, timeout=5)
            except Exception as e:
                print(f"[!] Discord alert failed: {e}")
        
        threading.Thread(target=send, daemon=True).start()
    
    def get_hostname(self, ip):
        """‡πÅ‡∏õ‡∏•‡∏á IP ‡πÄ‡∏õ‡πá‡∏ô hostname"""
        try:
            return socket.gethostbyaddr(ip)[0]
        except:
            return "unknown"
    
    def detect_port_scan(self, src_ip, dst_port):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö port scan"""
        self.port_scan_tracker[src_ip].add(dst_port)
        
        if len(self.port_scan_tracker[src_ip]) >= Config.PORT_SCAN_THRESHOLD:
            ports_list = sorted(list(self.port_scan_tracker[src_ip]))
            details = f"Scanned {len(ports_list)} ports: {ports_list[:10]}..."
            self.handle_threat(src_ip, "Port Scan", details)
            
            # Clear tracker ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            self.port_scan_tracker[src_ip].clear()
    
    def detect_connection_flood(self, src_ip):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö connection flooding"""
        now = datetime.now()
        self.connection_tracker[src_ip].append(now)
        
        # ‡∏ô‡∏±‡∏ö connection ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
        recent_connections = [
            conn_time for conn_time in self.connection_tracker[src_ip]
            if now - conn_time < timedelta(minutes=1)
        ]
        
        if len(recent_connections) > Config.CONNECTION_RATE_LIMIT:
            details = f"{len(recent_connections)} connections in 1 minute"
            self.handle_threat(src_ip, "Connection Flood", details)
    
    def detect_malicious_payload(self, packet, src_ip):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö payload ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢"""
        if not packet.haslayer(Raw):
            return
            
        try:
            payload = packet[Raw].load.decode('utf-8', errors='ignore').lower()
            
            # ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡πÅ‡∏Å‡∏ô
            scan_tools = ['nmap', 'masscan', 'zmap', 'unicornscan']
            exploit_tools = ['metasploit', 'msfconsole', 'sqlmap', 'nikto', 'hydra', 'medusa']
            
            for tool in scan_tools + exploit_tools:
                if tool in payload:
                    tool_type = "Scanner" if tool in scan_tools else "Exploit Tool"
                    self.handle_threat(src_ip, f"{tool_type} Detected", f"Tool: {tool}")
                    break
                    
            # SQL Injection patterns
            sql_patterns = [
                r"union.*select", r"drop.*table", r"insert.*into",
                r"delete.*from", r"update.*set", r"exec.*xp_"
            ]
            
            for pattern in sql_patterns:
                if re.search(pattern, payload):
                    self.handle_threat(src_ip, "SQL Injection Attempt", f"Pattern: {pattern}")
                    break
                    
        except Exception:
            pass
    
    def handle_threat(self, ip, threat_type, details=""):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö"""
        self.stats['threats_detected'] += 1
        
        print(f"[‚ö†Ô∏è] THREAT DETECTED: {ip} - {threat_type}")
        if details:
            print(f"    Details: {details}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
        self.log_threat(ip, threat_type, details)
        
        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        self.send_alert(ip, threat_type, details)
        
        # ‡∏ö‡∏•‡πá‡∏≠‡∏Å IP (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
        if Config.BLOCK_MODE and not self.blocked_ips.is_blocked(ip):
            if self.blocked_ips.block_ip(ip, threat_type):
                self.stats['ips_blocked'] += 1
    
    def analyze_packet(self, packet):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå packet"""
        self.stats['packets_analyzed'] += 1
        
        if not packet.haslayer(IP):
            return
            
        src_ip = packet[IP].src
        
        # ‡∏Ç‡πâ‡∏≤‡∏° IP ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
        if self.is_trusted_ip(src_ip):
            return
            
        # ‡∏Ç‡πâ‡∏≤‡∏° IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        if self.blocked_ips.is_blocked(src_ip):
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö TCP packets
        if packet.haslayer(TCP):
            tcp = packet[TCP]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö port scan
            if tcp.flags == 2:  # SYN
                self.detect_port_scan(src_ip, tcp.dport)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö connection flood
            self.detect_connection_flood(src_ip)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö payload ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
        self.detect_malicious_payload(packet, src_ip)
    
    def get_stats(self):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        uptime = datetime.now() - self.stats['start_time']
        return {
            **self.stats,
            'uptime': str(uptime),
            'blocked_ips_count': len(self.blocked_ips.blocked_ips)
        }

# === ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å ===
class NetworkSecurityMonitor:
    def __init__(self):
        self.blocked_ip_manager = BlockedIPManager()
        self.threat_detector = ThreatDetector(self.blocked_ip_manager)
        self.running = False
        
    def start_monitoring(self, interface=None):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
        print(f"[*] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢...")
        print(f"[*] Block Mode: {'ON' if Config.BLOCK_MODE else 'OFF'}")
        print(f"[*] Monitor Mode: {'ON' if Config.MONITOR_MODE else 'OFF'}")
        print(f"[*] Alert Mode: {'ON' if Config.ALERT_MODE else 'OFF'}")
        
        if interface:
            print(f"[*] Interface: {interface}")
        
        self.running = True
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto unblock
        auto_unblock_thread = threading.Thread(target=self.auto_unblock_loop, daemon=True)
        auto_unblock_thread.start()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats_thread = threading.Thread(target=self.stats_loop, daemon=True)
        stats_thread.start()
        
        try:
            if Config.MONITOR_MODE:
                sniff(
                    prn=self.threat_detector.analyze_packet,
                    store=0,
                    iface=interface,
                    stop_filter=lambda x: not self.running
                )
            else:
                print("[*] Monitor mode ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà - ‡∏£‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...")
                while self.running:
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            print(f"\n[*] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
            self.shutdown()
        except Exception as e:
            print(f"[!] Error: {e}")
            self.shutdown()
    
    def auto_unblock_loop(self):
        """‡∏•‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        while self.running:
            time.sleep(3600)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            if self.running:
                self.blocked_ip_manager.auto_unblock_expired()
    
    def stats_loop(self):
        """‡∏•‡∏π‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        while self.running:
            time.sleep(60)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ
            if self.running:
                self.print_stats()
    
    def print_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        stats = self.threat_detector.get_stats()
        print(f"\n--- Security Monitor Stats ---")
        print(f"üìä Packets analyzed: {stats['packets_analyzed']}")
        print(f"‚ö†Ô∏è Threats detected: {stats['threats_detected']}")
        print(f"üî¥ IPs blocked: {stats['ips_blocked']}")
        print(f"üìã Currently blocked: {stats['blocked_ips_count']}")
        print(f"‚è±Ô∏è Uptime: {stats['uptime']}")
        print(f"--- End Stats ---\n")
    
    def shutdown(self):
        """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        self.running = False
        print("[*] ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß")

# === Management Interface ===
def management_interface():
    """‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö"""
    blocked_ip_manager = BlockedIPManager()
    
    while True:
        print(f"\n--- Network Security Management ---")
        print(f"1. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å")
        print(f"2. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å IP")
        print(f"3. ‡∏ö‡∏•‡πá‡∏≠‡∏Å IP ‡πÅ‡∏ö‡∏ö manual")
        print(f"4. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å IP ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤")
        print(f"5. ‡∏î‡∏π logs")
        print(f"0. ‡∏≠‡∏≠‡∏Å")
        
        choice = input("üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ").strip()
        
        if choice == "1":
            blocked_ip_manager.list_blocked_ips()
            
        elif choice == "2":
            ip = input("IP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å: ").strip()
            if ip:
                blocked_ip_manager.unblock_ip(ip)
                
        elif choice == "3":
            ip = input("IP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å: ").strip()
            reason = input("‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ").strip() or "Manual Block"
            if ip:
                blocked_ip_manager.block_ip(ip, reason)
                
        elif choice == "4":
            count = blocked_ip_manager.auto_unblock_expired()
            print(f"[‚úì] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å {count} IP")
            
        elif choice == "5":
            print(f"üìÅ Log files ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô: {Config.LOGS_DIR}")
            for log_file in Config.LOGS_DIR.glob("*.json"):
                print(f"  - {log_file.name}")
                
        elif choice == "0":
            break
        else:
            print("[!] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ===
def main():
    print("=" * 60)
    print("üõ°Ô∏è  Advanced Network Security Monitor v2.0")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root
    if os.geteuid() != 0:
        print("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö packet ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ iptables")
        print("   ‡∏•‡∏≠‡∏á: sudo python3 security_monitor.py")
        sys.exit(1)
    
    # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
    print(f"1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (Monitor)")
    print(f"2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å (Management)")
    print(f"3. ‡∏î‡∏π Help")
    
    choice = input("üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-3): ").strip()
    
    if choice == "1":
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        interfaces = get_if_list()
        active_interfaces = [iface for iface in interfaces if not iface.startswith('lo')]
        
        print(f"\nüì° Interfaces: {', '.join(active_interfaces)}")
        print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å interface (‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î):")
        
        for i, iface in enumerate(active_interfaces, 1):
            print(f"  {i}. {iface}")
        
        iface_choice = input("üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ").strip()
        selected_interface = None
        
        if iface_choice.isdigit() and 1 <= int(iface_choice) <= len(active_interfaces):
            selected_interface = active_interfaces[int(iface_choice) - 1]
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
        monitor = NetworkSecurityMonitor()
        monitor.start_monitoring(selected_interface)
        
    elif choice == "2":
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö
        management_interface()
        
    elif choice == "3":
        # Help
        print(f"""
üõ°Ô∏è Network Security Monitor Help

üìã ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏•‡πá‡∏≠‡∏Å port scan
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÇ‡∏à‡∏°‡∏ï‡∏µ (nmap, metasploit, etc.)
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö SQL injection
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö connection flooding
- ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
- ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Discord
- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô

‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:
- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç DISCORD_WEBHOOK ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
- ‡∏õ‡∏£‡∏±‡∏ö TRUSTED_NETWORKS ‡πÅ‡∏•‡∏∞ WHITELIST
- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô threshold ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:
- blocked_ips.json - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å
- security_logs/ - ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs
- security_config.json - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)

‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:
- ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö whitelist ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
- ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• iptables ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        """)
    else:
        print("[!] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

if __name__ == "__main__":
    main()
